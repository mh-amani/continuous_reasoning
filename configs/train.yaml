# @package _global_

# specify here default configuration
# order of defaults determines the order in which configs override each other
defaults:
  - _self_
  - data: default
  - model: default
  - callbacks: default
  - trainer: gpu

  # experiment configs allow for version control of specific hyperparameters
  # e.g. best hyperparameters for given model and datamodule
  - experiment: null

# task name, determines output directory path
task_name: "train"

# tags to help you identify your experiments
# you can overwrite this in experiment configs
# overwrite from command line with `python train.py tags="[first_tag, second_tag]"`
tags: ["dev"]

# set False to skip model training
train: True

# evaluate on test set, using best model weights achieved during training
# lightning chooses best weights based on the metric specified in checkpoint callback
test: True

# simply provide checkpoint path to resume training
ckpt_path: null

# seed for random number generators in pytorch, numpy and python.random
seed: null

# overfit on a single batch, test and val will be run on the same batch
overfit_batch: 0

logger:
  _target_: lightning.pytorch.loggers.wandb.WandbLogger
  # name: "" # name of the run (normally generated by wandb)
  save_dir: "${paths.output_dir}"
  offline: False
  id: null # pass correct id to resume experiment!
  anonymous: null # enable anonymous logging
  log_model: False # upload lightning ckpts
  prefix: "" # a string to put at the beginning of metric keys
  # entity: "" # set to name of your wandb team
  group: ""
  job_type: ""
  entity: "epfl-dlab"
  project: "sigmae"
  name: ${task_name} 
  tags: []

paths:
  # path to root directory
  # this requires PROJECT_ROOT environment variable to exist
  # you can replace it with "." if you want the root to be the current working directory
  root_dir: ${oc.env:PROJECT_ROOT}

  # path to data directory
  data_dir: ${paths.root_dir}/data/

  # path to logging directory
  log_dir: ${paths.root_dir}/logs/

  # path to output directory, created dynamically by hydra
  # path generation pattern is specified in `configs/hydra/default.yaml`
  # use it to store all files generated during the run, like ckpts and metrics
  output_dir: ${hydra:runtime.output_dir}

  # path to working directory
  work_dir: ${hydra:runtime.cwd}

hydra:
  # https://hydra.cc/docs/configure_hydra/intro/

  # enable color logging
  defaults:
    - override hydra_logging: colorlog
    - override job_logging: colorlog

  # output directory, generated dynamically on each run
  run:
    dir: ${paths.log_dir}/${task_name}/runs/${now:%Y-%m-%d}_${now:%H-%M-%S}
  sweep:
    dir: ${paths.log_dir}/${task_name}/multiruns/${now:%Y-%m-%d}_${now:%H-%M-%S}
    subdir: ${hydra.job.num}

  job_logging:
    handlers:
      file:
        # Incorporates fix from https://github.com/facebookresearch/hydra/pull/2242
        filename: ${hydra.runtime.output_dir}/${task_name}.log


extras:
  # disable python warnings if they annoy you
  ignore_warnings: False

  # ask user for tags if none are provided in the config
  enforce_tags: True

  # pretty print config tree at the start of the run using Rich library
  print_config: True
